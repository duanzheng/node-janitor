name: release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build-macos:
    name: macOS signed & notarized DMG (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]

    env:
      # Electron Forge reads these inside forge.config.js
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      CSC_NAME: ${{ secrets.MAC_CSC_NAME }}
      # Keychain password used for a temporary keychain on the runner
      KEYCHAIN_PASSWORD: ${{ secrets.MAC_KEYCHAIN_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Import signing certificate into temporary keychain
        if: ${{ env.CSC_NAME != '' }}
        env:
          SIGNING_CERT_BASE64: ${{ secrets.MAC_SIGNING_CERT_BASE64 }}
          SIGNING_CERT_PASSWORD: ${{ secrets.MAC_SIGNING_CERT_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ env.KEYCHAIN_PASSWORD }}
        run: |
          set -euxo pipefail
          KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain-db"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Import Developer ID Application .p12
          echo "$SIGNING_CERT_BASE64" | base64 --decode > "$RUNNER_TEMP/cert.p12"
          security import "$RUNNER_TEMP/cert.p12" -k "$KEYCHAIN_PATH" -P "$SIGNING_CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security

          # Ensure codesign can find the certificate in this keychain
          security list-keychains -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | sed 's/["[:space:]]//g')
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

      - name: Build signed & notarized DMG for ${{ matrix.arch }}
        run: |
          # Build for explicit arch to avoid CI host-arch only artifacts
          yarn make --arch=${{ matrix.arch }}

      - name: Show produced files
        run: |
          echo "Artifacts under out/make:"
          find out/make -type f | sed 's/^/  /'

      - name: Upload artifact (DMG)
        uses: actions/upload-artifact@v4
        with:
          name: node-janitor-macos-${{ matrix.arch }}
          # Electron Forge DMG names include productName; match both arch outputs
          path: |
            out/make/**/Node*Janitor*.dmg
            out/make/**/node*janitor*.dmg

  build-windows:
    name: Windows build
    runs-on: windows-latest
    env:
      YARN_CACHE_FOLDER: ${{ github.workspace }}/.yarn-cache
      ELECTRON_CACHE: ${{ github.workspace }}/.electron-cache
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Force npm registry to npmjs (Windows)
        run: |
          echo registry=https://registry.npmjs.org > .npmrc
          yarn config set registry https://registry.npmjs.org
          powershell -Command "(Get-Content yarn.lock) -replace 'https://registry.npmmirror.com','https://registry.npmjs.org' | Set-Content yarn.lock"

      - name: Enable long paths
        run: git config --global core.longpaths true

      - name: Restore Yarn/Electron caches
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.YARN_CACHE_FOLDER }}
            ${{ env.ELECTRON_CACHE }}
          key: yarn-electron-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 600000

      - name: Cache Yarn and Electron downloads
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ env.YARN_CACHE_FOLDER }}
            ${{ env.ELECTRON_CACHE }}
          key: yarn-electron-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Make
        run: yarn make

      - name: Upload artifact (EXE)
        uses: actions/upload-artifact@v4
        with:
          name: node-janitor-windows
          path: |
            out/make/**/*.exe

  build-linux:
    name: Linux build
    runs-on: ubuntu-latest
    env:
      YARN_CACHE_FOLDER: ${{ github.workspace }}/.yarn-cache
      ELECTRON_CACHE: ${{ github.workspace }}/.electron-cache
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Force npm registry to npmjs (Linux)
        run: |
          echo 'registry=https://registry.npmjs.org' > .npmrc
          yarn config set registry https://registry.npmjs.org
          sed -i 's#https://registry.npmmirror.com#https://registry.npmjs.org#g' yarn.lock || true

      - name: Restore Yarn/Electron caches
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.YARN_CACHE_FOLDER }}
            ${{ env.ELECTRON_CACHE }}
          key: yarn-electron-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 600000

      - name: Cache Yarn and Electron downloads
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ env.YARN_CACHE_FOLDER }}
            ${{ env.ELECTRON_CACHE }}
          key: yarn-electron-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Make
        run: yarn make

      - name: Upload artifact (DEB/RPM)
        uses: actions/upload-artifact@v4
        with:
          name: node-janitor-linux
          path: |
            out/make/**/*.deb
            out/make/**/*.rpm

  release:
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-artifacts

      - name: Create GitHub Release and upload artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist-artifacts/**/**.dmg
            dist-artifacts/**/**.exe
            dist-artifacts/**/**.deb
            dist-artifacts/**/**.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
